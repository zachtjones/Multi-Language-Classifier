type Query {
    language(input: LanguageClassificationInput!): LanguageClassificationResult!
    downloadedTrainingDataSets: DownloadedTrainingDataResult!
}

type Mutation {
    downloadTrainingData(input: DownloadTrainingDataInput!): DownloadedTrainingData!
}

type DownloadedTrainingDataResult {
    trainingData: [DownloadedTrainingData!]!
}

type DownloadedTrainingData {
    id: ID!
    numberOfPhrasesInEachLanguage: Int!
    phraseWordLength: Int!
}

input DownloadTrainingDataInput {
    """
    Number of phrases to download in each language; min 10 max 1000
    """
    numberOfPhrasesInEachLanguage: Int!
}

type LanguageClassificationResult {
    mostLikelyLanguage: Language!
    probabilities: [LanguageProbability!]!
}

type LanguageProbability {
    language: Language!
    percentageLikely: Float!
}

input LanguageClassificationInput {
    phrase: String!
    # other parameters, like maybe the model to use
    # learner id perhaps?
}

enum Language {
    Albanian
    Croatia
    Czech
    Danish
    Dutch
    English
    French
    Gaelic
    German
    Hawaiian
    Icelandic
    Italian
    Romanian
    Samoan
    Spanish
}
