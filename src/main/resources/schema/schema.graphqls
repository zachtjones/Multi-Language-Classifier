type Query {
    trainingData: TrainingDataResult!
    models: TrainedModelsResult!
    language(input: LanguageClassificationInput!): LanguageClassificationResult!
    randomPhrase: RandomPhraseResult!
}

type Mutation {
    createTrainingData(input: CreateTrainingDataInput!): TrainingData!
    trainModel(input: TrainModelInput!): TrainedModel!
}

type TrainedModelsResult {
    models: [TrainedModel!]!
}

type TrainedModel {
    modelId: ID!
    description: String!
    trainingAccuracyPercentage: Float!
    testingAccuracyPercentage: Float!
}

input TrainModelInput {
    """
    Input data ID for using to train the model
    """
    trainingDataId: ID!

    """
    Input data ID for data used after training to determine accuracy, should be different than training.
    If same as training, then it will be result in the same number for training/testing accuracy.
    """
    testingDataId: ID!

    """
    Number of generations for attribute evolution used in the model
    """
    attributeGenerations: Int!
    """
    Number of attributes to retain for the next generation
    """
    attributePoolSize: Int!

    modelType: ModelType!

    """
    Number of levels to the tree to use for learning when using Decision Trees
    """
    treeDepth: Int

    """
    Required for adaptive boost strategy, the number of trees that are used
    """
    ensembleSize: Int
}

enum ModelType {
    """
    Generates a decision tree to determine pairwise between languages
    """
    DECISION_TREE
    """
    Generates an ensemble of decisions trees to determine pairwise between languages
    """
    ADAPTIVE_BOOSTING_TREE
}

type TrainingDataResult {
    trainingData: [TrainingData!]!
}

type TrainingData {
    id: ID!
    numberOfPhrasesInEachLanguage: Int!
    averageWordCountPerPhrase: Float!
}

input CreateTrainingDataInput {
    """
    Number of phrases to download in each language; min 10 max 2000
    """
    numberOfPhrasesInEachLanguage: Int!
}

type LanguageClassificationResult {
    mostLikelyLanguage: Language!
    probabilities: [LanguageProbability!]!
}

type LanguageProbability {
    language: Language!
    percentageLikely: Float!
}

input LanguageClassificationInput {
    phrase: String!
    modelId: ID!
}

type RandomPhraseResult {
    phrase: String!
    language: Language!
}

enum Language {
    ENGLISH
    FRENCH
    GERMAN
    SPANISH
    SWEDISH
    OTHER # used internally to train binary classifiers
}
